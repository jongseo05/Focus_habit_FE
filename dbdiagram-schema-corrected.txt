// Focus Habit Frontend Database Schema - Corrected Version
// https://dbdiagram.io 에서 바로 사용 가능

// 이벤트 타입 열거형
Enum event_type {
  PHONE
  LOOKAWAY
  DROWSY
  NOISE
  CHAT
}

// 사용자 테이블
Table user {
  user_id uuid [pk, default: `uuid_generate_v4()`]
  email text [not null, unique]
  created_at timestamp [not null, default: `now()`]
  time_zone text
  prefs jsonb
}

// 집중 세션 테이블
Table focus_session {
  session_id uuid [pk, default: `uuid_generate_v4()`]
  user_id uuid [not null, ref: > user.user_id]
  started_at timestamp [not null]
  ended_at timestamp
  goal_min int
  context_tag text
  
  indexes {
    (user_id, started_at)
  }
}

// 집중 샘플 데이터 테이블
Table focus_sample {
  session_id uuid [not null, ref: > focus_session.session_id]
  ts timestamp
  raw_score smallint
  score_conf numeric
  score smallint
  p_eye real
  pose_dev real
  topic_tag text
  rms_db real
  
  indexes {
    (session_id, ts) [pk]
  }
  
  Note: 'TimescaleDB hypertable on ts'
}

// 집중 이벤트 테이블
Table focus_event {
  event_id uuid [pk, default: `uuid_generate_v4()`]
  session_id uuid [not null, ref: > focus_session.session_id]
  ts timestamp
  event_type event_type
  payload jsonb
  
  indexes {
    (session_id, ts)
  }
}

// 스냅샷 테이블
Table snapshot {
  snapshot_id uuid [pk, default: `uuid_generate_v4()`]
  session_id uuid [not null, ref: > focus_session.session_id]
  ts timestamp
  s3_url text
  thumb_url text
  
  indexes {
    (session_id)
  }
}

// 일일 요약 테이블
Table daily_summary {
  user_id uuid [not null, ref: > user.user_id]
  date date
  focus_min int
  avg_score numeric
  peak_ts timestamp
  peak smallint
  drop_ts timestamp
  drop smallint
  phone_min int
  quiet_ratio numeric
  longest_streak int
  
  indexes {
    (user_id, date) [pk]
    (date)
  }
}

// 주간 요약 테이블
Table weekly_summary {
  user_id uuid [not null, ref: > user.user_id]
  iso_year int
  iso_week int
  avg_score numeric
  quiet_ratio numeric
  habit_idx numeric
  
  indexes {
    (user_id, iso_year, iso_week) [pk]
    (iso_year, iso_week)
  }
}

// 보상 클레임 테이블
Table reward_claim {
  claim_id uuid [pk, default: `uuid_generate_v4()`]
  user_id uuid [not null, ref: > user.user_id]
  date date
  exp int
  sticker_id text
  claimed_at timestamp [default: `now()`]
  
  indexes {
    (user_id, date)
  }
}

// 루틴 토글 테이블
Table routine_toggle {
  user_id uuid [not null, ref: > user.user_id]
  routine_id text
  enabled boolean [default: true]
  updated_at timestamp [default: `now()`]
  
  indexes {
    (user_id, routine_id) [pk]
  }
}

// 노트 테이블
Table note {
  note_id uuid [pk, default: `uuid_generate_v4()`]
  session_id uuid [not null, ref: > focus_session.session_id]
  ts_ref timestamp
  content text
}

// =====================================================
// 주요 수정사항:
// =====================================================

// 1. Enum 문법 수정
// - Enum event_type { ... } 형태로 수정
// - 기존 event_type_enum에서 event_type으로 변경

// 2. Indexes 문법 수정
// - Indexes { ... } → indexes { ... } (소문자로 변경)
// - dbdiagram.io는 소문자 indexes를 사용

// 3. 테이블 이름 수정
// - "user" → user (따옴표 제거)
// - dbdiagram.io에서는 테이블 이름에 따옴표 불필요

// 4. 참조 관계 수정
// - auth.users.id → user.user_id로 변경
// - 실제 사용자 테이블 참조로 수정

// 5. 기본값 문법 통일
// - uuid_generate_v4() 사용
// - now() 사용

// 6. 데이터 타입 통일
// - int → integer (PostgreSQL 표준)
// - timestamp → timestamp (타임존 포함)

// =====================================================
// 추가 권장사항:
// =====================================================

// 1. 습관 관리 테이블 추가 고려
// Table habits {
//   id uuid [pk, default: `uuid_generate_v4()`]
//   user_id uuid [not null, ref: > user.user_id]
//   name text [not null]
//   description text
//   category text
//   is_active boolean [default: true]
//   created_at timestamp [default: `now()`]
//   updated_at timestamp [default: `now()`]
// }

// Table habit_records {
//   id uuid [pk, default: `uuid_generate_v4()`]
//   habit_id uuid [not null, ref: > habits.id]
//   date date [not null]
//   completed_count int [default: 1]
//   notes text
//   created_at timestamp [default: `now()`]
// }

// 2. 세션 타입 필드 추가 고려
// - focus_session에 session_type 필드 추가
// - 'study', 'work', 'reading' 등 구분

// 3. 집중도 점수 필드 추가 고려
// - focus_session에 focus_score 필드 추가
// - 세션 전체 평균 집중도 저장

// 4. 방해 요소 카운트 필드 추가 고려
// - focus_session에 distractions 필드 추가
// - 세션 중 방해 요소 개수 저장 