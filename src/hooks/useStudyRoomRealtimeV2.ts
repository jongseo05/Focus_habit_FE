// =====================================================
// Í∞úÏÑ†Îêú Ïä§ÌÑ∞ÎîîÎ£∏ Ïã§ÏãúÍ∞Ñ Í∏∞Îä• ÌõÖ
// =====================================================

import { useEffect, useCallback, useRef } from 'react'
import { StudyRoomWebSocketClient } from '@/lib/websocket/studyRoomClient'
import { supabaseBrowser } from '@/lib/supabase/client'
import type { StudyRoom, ParticipantWithUser } from '@/types/social'

interface UseStudyRoomRealtimeProps {
  room?: StudyRoom
  userId?: string
  onParticipantUpdate: (participants: ParticipantWithUser[]) => void
  onFocusScoreUpdate: (score: number) => void
  onNotification: (message: string, type?: 'join' | 'leave' | 'info') => void
}



export function useStudyRoomRealtime({
  room,
  userId,
  onParticipantUpdate,
  onFocusScoreUpdate,
  onNotification
}: UseStudyRoomRealtimeProps) {
  
  const wsClient = useRef<StudyRoomWebSocketClient | null>(null)
  const focusUpdateThrottle = useRef<NodeJS.Timeout | null>(null)
  
  // WebSocket ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    wsClient.current = new StudyRoomWebSocketClient({
      onParticipantJoined: (participant) => {
        onNotification(`${participant.user.name}ÎãòÏù¥ ÏûÖÏû•ÌñàÏäµÎãàÎã§.`, 'join')
        // Ï∞∏Í∞ÄÏûê Î™©Î°ù Îã§Ïãú Î°úÎìú (API Ìò∏Ï∂ú)
        loadParticipants()
      },
      onParticipantLeft: (userId) => {
        onNotification('Ï∞∏Í∞ÄÏûêÍ∞Ä ÎÇòÍ∞îÏäµÎãàÎã§.', 'leave')
        // Ï∞∏Í∞ÄÏûê Î™©Î°ù Îã§Ïãú Î°úÎìú (API Ìò∏Ï∂ú)
        loadParticipants()
      },
      onFocusUpdate: (userId, score) => {
        onFocusScoreUpdate(score)
      },
      onEncouragement: (senderId, senderName, message) => {
        onNotification(`üí™ ${senderName}: ${message}`, 'info')
      },
      onRoomEnded: () => {
        onNotification('Ïä§ÌÑ∞ÎîîÎ£∏Ïù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.', 'info')
      },
      onError: (error) => {
        onNotification(`Ïó∞Í≤∞ Ïò§Î•ò: ${error}`, 'info')
      }
    })
    
    return () => {
      wsClient.current?.disconnect()
    }
  }, [])

  // Supabase Realtime Íµ¨ÎèÖ (Í≤ΩÏüÅ ÏãúÏûë Ïù¥Î≤§Ìä∏Ïö©)
  useEffect(() => {
    if (!room?.room_id || !userId) return

    const supabase = supabaseBrowser()
    const channelName = `room-participants-${room.room_id}`
    
    console.log('üîå [V2] Supabase Realtime Ï±ÑÎÑê Íµ¨ÎèÖ ÏãúÏûë:', channelName)
    console.log('  - Î£∏ ID:', room.room_id)
    console.log('  - ÏÇ¨Ïö©Ïûê ID:', userId)
    
    // Í≤ΩÏüÅ ÏãúÏûë Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ ÏàòÏã†Ïö© Ï±ÑÎÑê
    const competitionChannel = supabase
      .channel(channelName)
      .on('broadcast', { event: 'competition_started' }, async (payload) => {
        console.log('üéØ [V2] Í≤ΩÏüÅ ÏãúÏûë ÏïåÎ¶º ÏàòÏã†!')
        console.log('  - ÏàòÏã† ÏãúÍ∞Ñ:', new Date().toISOString())
        console.log('  - Ï±ÑÎÑê:', channelName)
        console.log('  - ÏõêÏãú ÌéòÏù¥Î°úÎìú:', payload)
        console.log('  - ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ID:', userId)
        console.log('  - Î£∏ ID:', room?.room_id)
        
        // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò ÏÑ∏ÏÖò ÏûêÎèô ÏãúÏûë
        if (payload.payload && userId) {
          console.log('üöÄ [V2] ÏûêÎèô ÏÑ∏ÏÖò ÏãúÏûë Ï≤òÎ¶¨ ÏãúÏûë...')
          onNotification('ÏßëÏ§ëÎèÑ ÎåÄÍ≤∞Ïù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§! ÏÑ∏ÏÖòÏùÑ ÏãúÏûëÌï©ÎãàÎã§.', 'info')
          
          try {
            const sessionData = {
              room_id: room.room_id,
              goal_min: payload.payload.duration,
              context_tag: 'ÏßëÏ§ëÎèÑ ÎåÄÍ≤∞',
              session_type: 'study_room',
              notes: `${payload.payload.name} Ï∞∏Í∞Ä`
            }
            
            console.log('üìù [V2] ÏÑ∏ÏÖò ÏÉùÏÑ± Îç∞Ïù¥ÌÑ∞:', sessionData)
            console.log('üì° [V2] Ïä§ÌÑ∞ÎîîÎ£∏ ÏßëÏ§ë ÏÑ∏ÏÖò API Ìò∏Ï∂ú Ï§ë...')
            
            // Ïä§ÌÑ∞ÎîîÎ£∏ ÏßëÏ§ë ÏÑ∏ÏÖò ÏãúÏûë API Ìò∏Ï∂ú
            const response = await fetch(`/api/social/study-room-focus-session`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(sessionData)
            })
            
            console.log('üì° [V2] ÏÑ∏ÏÖò API ÏùëÎãµ ÏÉÅÌÉú:', response.status, response.statusText)
            
            if (response.ok) {
              const result = await response.json()
              console.log('‚úÖ [V2] Í≤ΩÏüÅ ÏÑ∏ÏÖò ÏûêÎèô ÏãúÏûë ÏÑ±Í≥µ:', result)
              onNotification('ÏßëÏ§ëÎèÑ ÎåÄÍ≤∞ ÏÑ∏ÏÖòÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§!', 'info')
            } else {
              const errorData = await response.json()
              console.error('‚ùå [V2] Í≤ΩÏüÅ ÏÑ∏ÏÖò ÏûêÎèô ÏãúÏûë Ïã§Ìå®:', {
                status: response.status,
                statusText: response.statusText,
                errorData: errorData
              })
              onNotification('ÏÑ∏ÏÖò ÏãúÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'info')
            }
          } catch (error) {
            console.error('‚ùå [V2] Í≤ΩÏüÅ ÏÑ∏ÏÖò ÏãúÏûë Ï§ë Ïò§Î•ò:', error)
            onNotification('ÏÑ∏ÏÖò ÏãúÏûë Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', 'info')
          }
        } else {
          console.log('‚ö†Ô∏è [V2] ÏÑ∏ÏÖò ÏãúÏûë Ï°∞Í±¥ ÎØ∏Ï∂©Ï°±:')
          console.log('  - payload.payload Ï°¥Ïû¨:', !!payload.payload)
          console.log('  - payload.payload ÎÇ¥Ïö©:', payload.payload)
          console.log('  - userId Ï°¥Ïû¨:', !!userId)
        }
      })
      .on('broadcast', { event: 'competition_ended' }, async (payload) => {
        console.log('üèÅ [V2] Í≤ΩÏüÅ Ï¢ÖÎ£å ÏïåÎ¶º ÏàòÏã†!', payload)
        onNotification('ÏßëÏ§ëÎèÑ ÎåÄÍ≤∞Ïù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.', 'info')
        // UI Î≥µÍµ¨Ïö© Ïª§Ïä§ÌÖÄ Ïù¥Î≤§Ìä∏
        if (typeof window !== 'undefined') {
          window.dispatchEvent(new CustomEvent('focus-session-auto-ended', {
            detail: {
              competitionId: payload.payload?.competition_id,
              endedAt: payload.payload?.ended_at,
              sessions: payload.payload?.sessions || []
            }
          }))
        }
        // Ï∞∏Í∞ÄÏûê Î™©Î°ù Ïû¨Î°úÎî©
        await loadParticipants()
      })
      .subscribe((status) => {
        const timestamp = new Date().toISOString()
        console.log(`üì° [V2] [${timestamp}] Supabase Ï±ÑÎÑê Íµ¨ÎèÖ ÏÉÅÌÉú Î≥ÄÍ≤Ω:`)
        console.log('  - Ï±ÑÎÑê:', channelName)
        console.log('  - ÏÉÅÌÉú:', status)
        console.log('  - ÏÇ¨Ïö©Ïûê ID:', userId)
        console.log('  - Î£∏ ID:', room?.room_id)
        
        if (status === 'SUBSCRIBED') {
          console.log('‚úÖ [V2] Supabase Ï±ÑÎÑê Íµ¨ÎèÖ ÏÑ±Í≥µ! Í≤ΩÏüÅ ÏãúÏûë Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ ÏàòÏã† Ï§ÄÎπÑ ÏôÑÎ£å')
          
          // üß™ ÌÖåÏä§Ìä∏Ïö©: Íµ¨ÎèÖ ÏÑ±Í≥µ Ï¶âÏãú ÌÖåÏä§Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ Ï†ÑÏÜ°
          setTimeout(() => {
            console.log('üß™ [V2] ÌÖåÏä§Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ Ï†ÑÏÜ° ÏãúÎèÑ...')
            supabase
              .channel(channelName)
              .send({
                type: 'broadcast',
                event: 'competition_started',
                payload: {
                  test: true,
                  message: 'ÌÖåÏä§Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏',
                  timestamp: new Date().toISOString()
                }
              })
              .then(result => {
                console.log('üß™ [V2] ÌÖåÏä§Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ Ï†ÑÏÜ° Í≤∞Í≥º:', result)
              })
              .catch(error => {
                console.error('üß™ [V2] ÌÖåÏä§Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ Ï†ÑÏÜ° Ïã§Ìå®:', error)
              })
          }, 2000) // 2Ï¥à ÌõÑ ÌÖåÏä§Ìä∏ Ï†ÑÏÜ°
        } else if (status === 'CHANNEL_ERROR') {
          console.error('‚ùå [V2] Supabase Ï±ÑÎÑê Íµ¨ÎèÖ Ïã§Ìå®!')
        } else if (status === 'TIMED_OUT') {
          console.error('‚è∞ [V2] Supabase Ï±ÑÎÑê Íµ¨ÎèÖ ÌÉÄÏûÑÏïÑÏõÉ!')
        } else if (status === 'CLOSED') {
          console.log('üîå [V2] Supabase Ï±ÑÎÑê Íµ¨ÎèÖ Ï¢ÖÎ£å')
        }
      })

    return () => {
      console.log('üì° [V2] Supabase Realtime Ï±ÑÎÑê Íµ¨ÎèÖ Ìï¥Ï†ú:', channelName)
      supabase.removeChannel(competitionChannel)
    }
  }, [room?.room_id, userId, onNotification])

  // Ï∞∏Í∞ÄÏûê Î™©Î°ù Î°úÎìú Ìï®Ïàò
  const loadParticipants = useCallback(async () => {
    if (!room?.room_id) return
    
    try {
      const response = await fetch(`/api/social/study-room/${room.room_id}/participants`)
      if (response.ok) {
        const result = await response.json()
        if (result.success && result.data) {
          onParticipantUpdate(result.data)
        }
      }
    } catch (error) {
      console.error('Ï∞∏Í∞ÄÏûê Î™©Î°ù Î°úÎìú Ïã§Ìå®:', error)
    }
  }, [room?.room_id, onParticipantUpdate])

  // Î∞© Ï∞∏Í∞Ä
  const joinRoom = useCallback(() => {
    if (!room?.room_id || !userId || !wsClient.current) return
    
    wsClient.current.connect(room.room_id, userId)
    loadParticipants()
  }, [room?.room_id, userId, loadParticipants])

  // Î∞© ÎÇòÍ∞ÄÍ∏∞
  const leaveRoom = useCallback(() => {
    if (!wsClient.current) return
    
    wsClient.current.disconnect()
  }, [])

  // ÏßëÏ§ëÎèÑ Ï†êÏàò Ï†ÑÏÜ° (Ïä§Î°úÌãÄÎßÅ Ï†ÅÏö©)
  const sendFocusUpdate = useCallback((score: number) => {
    if (!wsClient.current) return
    
    // 500msÎßàÎã§ Ìïú Î≤àÎßå Ï†ÑÏÜ° (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
    if (focusUpdateThrottle.current) {
      clearTimeout(focusUpdateThrottle.current)
    }
    
    focusUpdateThrottle.current = setTimeout(() => {
      wsClient.current?.sendFocusUpdate(score)
    }, 500)
  }, [])

  // Í≤©Î†§ Î©îÏãúÏßÄ Ï†ÑÏÜ°
  const sendEncouragement = useCallback((targetUserId: string, message: string) => {
    if (!wsClient.current || !message.trim()) return
    
    wsClient.current.sendEncouragement(targetUserId, message.trim())
  }, [])

  // Î∞© Ï¢ÖÎ£å ÏïåÎ¶º (Ìò∏Ïä§Ìä∏Îßå)
  const notifyRoomEnd = useCallback(() => {
    // Íµ¨ÌòÑ ÌïÑÏöîÏãú Ï∂îÍ∞Ä
  }, [])

  // Î∞© Ï†ïÎ≥¥Í∞Ä Î≥ÄÍ≤ΩÎê† Îïå Ïó∞Í≤∞
  useEffect(() => {
    if (room?.room_id && userId) {
      joinRoom()
    }
    
    return () => {
      leaveRoom()
    }
  }, [room?.room_id, userId, joinRoom, leaveRoom])

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
  useEffect(() => {
    return () => {
      if (focusUpdateThrottle.current) {
        clearTimeout(focusUpdateThrottle.current)
      }
      wsClient.current?.disconnect()
    }
  }, [])

  return {
    // Ïó∞Í≤∞ ÏÉÅÌÉú
    status: wsClient.current?.isConnected ? 'connected' : 'disconnected',
    
    // Ïï°ÏÖò Ìï®Ïàò
    joinRoom,
    leaveRoom,
    sendFocusUpdate,
    sendEncouragement,
    notifyRoomEnd,
    
    // ÏàòÎèô Ïó∞Í≤∞ Ï†úÏñ¥
    connect: joinRoom,
    disconnect: leaveRoom
  }
}
