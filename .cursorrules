# Focus Habit Frontend - Cursor Rules

## 프로젝트 개요
이 프로젝트는 Next.js 14, TypeScript, Tailwind CSS를 사용한 포커스 습관 관리 웹 애플리케이션입니다.

## 기술 스택
- **Framework**: Next.js 14 (App Router)
- **Language**: TypeScript
- **Styling**: Tailwind CSS + shadcn/ui
- **Database**: Supabase
- **Authentication**: Supabase Auth
- **State Management**: Zustand
- **Real-time**: WebSocket
- **ML/AI**: ONNX.js (KoELECTRA)

## 코딩 컨벤션

### 파일 및 폴더 명명 규칙
- 컴포넌트: PascalCase (예: `FocusSessionErrorDisplay.tsx`)
- 훅: camelCase + use 접두사 (예: `useAuth.ts`)
- 유틸리티: camelCase (예: `utils.ts`)
- 타입: camelCase (예: `auth.ts`, `focusSession.ts`)

### 컴포넌트 구조
```typescript
// 컴포넌트는 함수형 컴포넌트 사용
const ComponentName = ({ prop1, prop2 }: ComponentProps) => {
  // hooks
  // state
  // effects
  // handlers
  // render
};
```

### TypeScript 규칙
- 모든 함수와 변수에 명시적 타입 지정
- 인터페이스는 `I` 접두사 없이 사용
- 타입 정의는 `types/` 폴더에 분리
- API 응답 타입은 별도 정의

### 스타일링 규칙
- Tailwind CSS 클래스 사용
- shadcn/ui 컴포넌트 활용
- 커스텀 스타일은 `globals.css`에 정의
- 반응형 디자인 우선

## 아키텍처 가이드라인

### 폴더 구조
- `app/`: Next.js App Router 페이지
- `components/`: 재사용 가능한 컴포넌트
- `hooks/`: 커스텀 훅
- `lib/`: 유틸리티 및 설정
- `stores/`: Zustand 스토어
- `types/`: TypeScript 타입 정의

### 상태 관리
- 전역 상태: Zustand 스토어 사용
- 로컬 상태: React useState/useReducer
- 서버 상태: React Query (TanStack Query)

### API 통신
- Supabase 클라이언트 사용
- API 라우트는 `app/api/` 폴더에 정의
- 에러 핸들링 필수

## 보안 및 성능

### 보안
- 환경 변수 사용 (API 키 등)
- 인증된 라우트 보호
- 입력 검증 필수

### 성능
- 이미지 최적화 (Next.js Image)
- 코드 스플리팅
- 메모이제이션 활용
- 번들 크기 최적화

## 특별 고려사항

### ML/AI 기능
- ONNX.js 모델 사용
- Web Worker 활용
- 실시간 음성 처리

### 실시간 기능
- WebSocket 연결 관리
- 연결 상태 모니터링
- 재연결 로직 구현

### 접근성
- ARIA 라벨 사용
- 키보드 네비게이션 지원
- 색상 대비 고려

## 코드 리뷰 체크리스트
- [ ] TypeScript 타입 정의 완료
- [ ] 에러 핸들링 구현
- [ ] 반응형 디자인 적용
- [ ] 접근성 고려
- [ ] 성능 최적화
- [ ] 보안 검토

## 자주 사용하는 패턴

### 커스텀 훅 패턴
```typescript
export const useCustomHook = () => {
  // 상태 및 로직
  return { data, loading, error, actions };
};
```

### API 호출 패턴
```typescript
const { data, error, loading } = await supabase
  .from('table')
  .select('*')
  .eq('column', value);
```

### 에러 바운더리 패턴
```typescript
try {
  // 위험한 작업
} catch (error) {
  console.error('Error:', error);
  // 사용자 친화적 에러 메시지
}
```

## 개발 환경 설정
- Node.js 18+ 사용
- pnpm 패키지 매니저 사용
- ESLint + Prettier 설정
- TypeScript strict 모드 활성화

## 배포 고려사항
- Vercel 배포 권장
- 환경 변수 설정
- 빌드 최적화
- 모니터링 설정 