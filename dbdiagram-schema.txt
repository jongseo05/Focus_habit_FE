// Focus Habit Frontend Database Schema for dbdiagram.io
// https://dbdiagram.io 에서 사용할 수 있는 스키마 코드

// =====================================================
// 1. 사용자 관련 테이블
// =====================================================

// 사용자 프로필 뷰 (auth.users 기반)
Table user_profile {
  user_id uuid [pk]
  email varchar
  created_at timestamp
  name varchar
  avatar_url varchar
  bio text
  time_zone varchar
  prefs jsonb
}

// =====================================================
// 2. 집중 세션 관련 테이블
// =====================================================

Table focus_session {
  session_id uuid [pk]
  user_id uuid [ref: > auth.users.id]
  started_at timestamp [not null]
  ended_at timestamp
  goal_min integer
  context_tag text
  session_type text [default: 'study']
  focus_score numeric
  distractions integer [default: 0]
  notes text
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table focus_sample {
  session_id uuid [ref: > focus_session.session_id]
  ts timestamp [not null]
  raw_score smallint
  score_conf numeric
  score smallint
  p_eye real
  pose_dev real
  topic_tag text
  rms_db real
  created_at timestamp [default: `now()`]
  
  indexes {
    (session_id, ts) [pk]
  }
}

Table focus_event {
  event_id uuid [pk]
  session_id uuid [ref: > focus_session.session_id]
  ts timestamp [not null]
  event_type event_type_enum [not null]
  payload jsonb
  created_at timestamp [default: `now()`]
}

// 이벤트 타입 열거형
Enum event_type_enum {
  phone
  distraction
  break
  focus
  posture
  audio_analysis
}

// =====================================================
// 3. 스냅샷 및 노트 테이블
// =====================================================

Table snapshot {
  snapshot_id uuid [pk]
  session_id uuid [ref: > focus_session.session_id]
  ts timestamp [not null]
  s3_url text
  thumb_url text
  focus_score integer
  created_at timestamp [default: `now()`]
}

Table note {
  note_id uuid [pk]
  session_id uuid [ref: > focus_session.session_id]
  ts_ref timestamp [not null]
  content text [not null]
  created_at timestamp [default: `now()`]
}

// =====================================================
// 4. 요약 데이터 테이블
// =====================================================

Table daily_summary {
  user_id uuid [ref: > auth.users.id]
  date date [not null]
  focus_min integer [default: 0]
  avg_score numeric [default: 0]
  peak_ts timestamp
  peak smallint
  drop_ts timestamp
  drop smallint
  phone_min integer [default: 0]
  quiet_ratio numeric [default: 0]
  longest_streak integer [default: 0]
  sessions_count integer [default: 0]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  
  indexes {
    (user_id, date) [pk]
  }
}

Table weekly_summary {
  user_id uuid [ref: > auth.users.id]
  iso_year integer [not null]
  iso_week integer [not null]
  avg_score numeric [default: 0]
  quiet_ratio numeric [default: 0]
  habit_idx numeric [default: 0]
  total_focus_min integer [default: 0]
  total_sessions integer [default: 0]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  
  indexes {
    (user_id, iso_year, iso_week) [pk]
  }
}

// =====================================================
// 5. 보상 및 루틴 테이블
// =====================================================

Table reward_claim {
  claim_id uuid [pk]
  user_id uuid [ref: > auth.users.id]
  date date [not null]
  exp integer [default: 0]
  sticker_id text
  claimed_at timestamp [default: `now()`]
  created_at timestamp [default: `now()`]
}

Table routine_toggle {
  user_id uuid [ref: > auth.users.id]
  routine_id text [not null]
  enabled boolean [default: false]
  updated_at timestamp [default: `now()`]
  created_at timestamp [default: `now()`]
  
  indexes {
    (user_id, routine_id) [pk]
  }
}

// =====================================================
// 6. 습관 관리 테이블
// =====================================================

Table habits {
  id uuid [pk]
  user_id uuid [ref: > auth.users.id]
  name text [not null]
  description text
  category text
  is_active boolean [default: true]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table habit_records {
  id uuid [pk]
  habit_id uuid [ref: > habits.id]
  date date [not null]
  completed_count integer [default: 1]
  notes text
  created_at timestamp [default: `now()`]
}

// =====================================================
// 7. 뷰 정의
// =====================================================

// 오늘의 집중 세션 요약 뷰
View today_focus_summary {
  user_id uuid
  sessions_count integer
  total_minutes numeric
  avg_score numeric
  max_score numeric
}

// 주간 집중 통계 뷰
View weekly_focus_stats {
  user_id uuid
  week_start timestamp
  sessions_count integer
  total_minutes numeric
  avg_score numeric
}

// =====================================================
// 8. 관계 정의
// =====================================================

// focus_session -> focus_sample (1:N)
// focus_session -> focus_event (1:N)
// focus_session -> snapshot (1:N)
// focus_session -> note (1:N)
// user -> focus_session (1:N)
// user -> daily_summary (1:N)
// user -> weekly_summary (1:N)
// user -> reward_claim (1:N)
// user -> routine_toggle (1:N)
// user -> habits (1:N)
// habits -> habit_records (1:N)

// =====================================================
// 9. 인덱스 정의
// =====================================================

// 성능 최적화를 위한 인덱스들
// focus_session 테이블
// - user_id, started_at 복합 인덱스
// - session_type 인덱스
// - context_tag 인덱스

// focus_sample 테이블
// - session_id, ts 복합 인덱스 (이미 PK)

// focus_event 테이블
// - session_id, ts 복합 인덱스
// - event_type 인덱스

// snapshot 테이블
// - session_id, ts 복합 인덱스

// note 테이블
// - session_id, ts_ref 복합 인덱스

// daily_summary 테이블
// - user_id, date 복합 인덱스 (이미 PK)

// weekly_summary 테이블
// - user_id, iso_year, iso_week 복합 인덱스 (이미 PK)

// reward_claim 테이블
// - user_id, date 복합 인덱스

// habits 테이블
// - user_id 인덱스

// habit_records 테이블
// - habit_id, date 복합 인덱스

// =====================================================
// 10. 보안 정책 (RLS)
// =====================================================

// 모든 테이블에 Row Level Security (RLS) 활성화
// 사용자는 자신의 데이터만 접근 가능
// - focus_session: auth.uid() = user_id
// - focus_sample: session_id를 통해 user_id 확인
// - focus_event: session_id를 통해 user_id 확인
// - snapshot: session_id를 통해 user_id 확인
// - note: session_id를 통해 user_id 확인
// - daily_summary: auth.uid() = user_id
// - weekly_summary: auth.uid() = user_id
// - reward_claim: auth.uid() = user_id
// - routine_toggle: auth.uid() = user_id
// - habits: auth.uid() = user_id
// - habit_records: habit_id를 통해 user_id 확인

// =====================================================
// 11. 트리거 및 함수
// =====================================================

// updated_at 자동 업데이트 트리거
// - focus_session.updated_at
// - daily_summary.updated_at
// - weekly_summary.updated_at
// - habits.updated_at
// - routine_toggle.updated_at

// =====================================================
// 12. 데이터 타입 및 제약사항
// =====================================================

// UUID: PostgreSQL의 gen_random_uuid() 사용
// Timestamp: WITH TIME ZONE 포함
// JSONB: JSON 데이터 저장용
// Enum: event_type_enum 사용
// Default Values: 적절한 기본값 설정
// Not Null: 필수 필드 표시
// Foreign Keys: 참조 무결성 보장
// Primary Keys: 각 테이블의 고유 식별자
// Composite Keys: 복합 기본키 사용

// =====================================================
// 13. 성능 최적화 고려사항
// =====================================================

// 1. 인덱스 전략
// - 자주 조회되는 컬럼에 인덱스 생성
// - 복합 인덱스로 쿼리 성능 향상
// - 부분 인덱스로 저장 공간 절약

// 2. 파티셔닝 고려
// - focus_sample: 시간 기반 파티셔닝
// - focus_event: 시간 기반 파티셔닝
// - daily_summary: 날짜 기반 파티셔닝

// 3. 아카이빙 전략
// - 오래된 데이터는 별도 테이블로 이동
// - 통계 데이터는 집계 테이블에 저장

// 4. 캐싱 전략
// - 자주 조회되는 요약 데이터 캐싱
// - Redis 등을 활용한 실시간 데이터 캐싱

// =====================================================
// 14. 확장성 고려사항
// =====================================================

// 1. 수평 확장
// - 사용자별 샤딩 가능
// - 시간 기반 파티셔닝
// - 읽기 전용 복제본 활용

// 2. 수직 확장
// - 인덱스 최적화
// - 쿼리 튜닝
// - 하드웨어 업그레이드

// 3. 마이그레이션 전략
// - 스키마 변경 시 하위 호환성 유지
// - 점진적 마이그레이션
// - 롤백 계획 수립

// =====================================================
// 15. 모니터링 및 로깅
// =====================================================

// 1. 성능 모니터링
// - 쿼리 실행 시간 추적
// - 인덱스 사용률 모니터링
// - 테이블 크기 변화 추적

// 2. 에러 로깅
// - 데이터베이스 에러 로깅
// - 트랜잭션 실패 추적
// - 연결 문제 모니터링

// 3. 비즈니스 메트릭
// - 사용자 활동 추적
// - 집중 세션 통계
// - 시스템 사용률 분석 